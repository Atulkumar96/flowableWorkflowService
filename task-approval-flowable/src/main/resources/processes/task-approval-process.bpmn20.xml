<?xml version="1.0" encoding="UTF-8"?>
<definitions xmlns="http://www.omg.org/spec/BPMN/20100524/MODEL"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:flowable="http://flowable.org/bpmn"
             targetNamespace="http://flowable.org/processes">

    <process id="taskApprovalProcess" name="Task Approval Process" isExecutable="true">
        <startEvent id="startEvent" name="Start">
        </startEvent>

        <sequenceFlow id="flow1" sourceRef="startEvent" targetRef="draftTask"/>

        <userTask id="draftTask" name="Draft Task">
            <documentation>Create draft of the task</documentation>
        </userTask>

        <sequenceFlow id="flow2" sourceRef="draftTask" targetRef="validateDraftState"/>

        <exclusiveGateway id="validateDraftState" name="Validate Draft State"/>

        <sequenceFlow id="flow2a" sourceRef="validateDraftState" targetRef="updateStateToReadyForReview">
            <conditionExpression xsi:type="tFormalExpression">
                ${workflowState == 'DOCUMENT_READY_FOR_REVIEW' &amp;&amp; state == 'DRAFTED'}
            </conditionExpression>
        </sequenceFlow>

        <sequenceFlow id="flow2b" sourceRef="validateDraftState" targetRef="handleDraftError">
            <conditionExpression xsi:type="tFormalExpression">
                ${workflowState != 'DOCUMENT_READY_FOR_REVIEW' || state != 'DRAFTED'}
            </conditionExpression>
        </sequenceFlow>

        <serviceTask id="handleDraftError" name="Handle Draft Error"
                     flowable:class="com.task.flowable.taskapprovalflowable.delegate.InvalidStateErrorDelegate"/>

        <sequenceFlow id="flowDraftError" sourceRef="handleDraftError" targetRef="draftTask"/>

        <serviceTask id="updateStateToReadyForReview" name="Update State to Ready for Review"
                     flowable:delegateExpression="${stateUpdateDelegate}"/>

        <sequenceFlow id="flow3" sourceRef="updateStateToReadyForReview" targetRef="sendReviewerEmail"/>

        <serviceTask id="sendReviewerEmail" name="Notify Reviewer"
                     flowable:delegateExpression="${notificationDelegate}"/>

        <sequenceFlow id="flow4" sourceRef="sendReviewerEmail" targetRef="reviewTask"/>

        <userTask id="reviewTask" name="Review Task"
                  flowable:candidateGroups="reviewers">
            <documentation>Review the submitted task</documentation>
        </userTask>

        <sequenceFlow id="flow5" sourceRef="reviewTask" targetRef="validateReviewState"/>

        <exclusiveGateway id="validateReviewState" name="Validate Review State"/>

        <sequenceFlow id="flow5a" sourceRef="validateReviewState" targetRef="reviewDecision">
            <conditionExpression xsi:type="tFormalExpression">
                ${(workflowState == 'REVIEW_ACCEPTED' || workflowState == 'REVIEW_REJECTED') &amp;&amp; state == 'DRAFTED'}
            </conditionExpression>
        </sequenceFlow>

        <sequenceFlow id="flow5b" sourceRef="validateReviewState" targetRef="handleReviewError">
            <conditionExpression xsi:type="tFormalExpression">
                ${!(workflowState == 'REVIEW_ACCEPTED' || workflowState == 'REVIEW_REJECTED') || state != 'DRAFTED'}
            </conditionExpression>
        </sequenceFlow>

        <serviceTask id="handleReviewError" name="Handle Review Error"
                     flowable:class="com.task.flowable.taskapprovalflowable.delegate.InvalidStateErrorDelegate"/>

        <sequenceFlow id="flowReviewError" sourceRef="handleReviewError" targetRef="reviewTask"/>

        <exclusiveGateway id="reviewDecision" name="Review Decision"/>

        <sequenceFlow id="flow6" sourceRef="reviewDecision" targetRef="updateStateToReviewAccepted">
            <conditionExpression xsi:type="tFormalExpression">${approved}</conditionExpression>
        </sequenceFlow>

        <sequenceFlow id="flow7" sourceRef="reviewDecision" targetRef="updateStateToReviewRejected">
            <conditionExpression xsi:type="tFormalExpression">${!approved}</conditionExpression>
        </sequenceFlow>

        <serviceTask id="updateStateToReviewAccepted" name="Update State to Review Accepted"
                     flowable:delegateExpression="${stateUpdateDelegate}"/>

        <sequenceFlow id="flow8" sourceRef="updateStateToReviewAccepted" targetRef="notifyReviewAccepted"/>

        <serviceTask id="notifyReviewAccepted" name="Notify Review Accepted"
                     flowable:delegateExpression="${notificationDelegate}"/>

        <sequenceFlow id="flow9" sourceRef="notifyReviewAccepted" targetRef="approveTask"/>

        <serviceTask id="updateStateToReviewRejected" name="Update State to Review Rejected"
                     flowable:delegateExpression="${stateUpdateDelegate}"/>

        <sequenceFlow id="flow10" sourceRef="updateStateToReviewRejected" targetRef="notifyReviewRejected"/>

        <serviceTask id="notifyReviewRejected" name="Notify Review Rejected"
                     flowable:delegateExpression="${notificationDelegate}"/>

        <sequenceFlow id="flow11" sourceRef="notifyReviewRejected" targetRef="draftTask"/>

        <userTask id="approveTask" name="Approve Task"
                  flowable:candidateGroups="approvers">
            <documentation>Final approval of the task</documentation>
        </userTask>

        <sequenceFlow id="flow12" sourceRef="approveTask" targetRef="validateApprovalState"/>

        <exclusiveGateway id="validateApprovalState" name="Validate Approval State"/>

        <sequenceFlow id="flow12a" sourceRef="validateApprovalState" targetRef="approvalDecision">
            <conditionExpression xsi:type="tFormalExpression">
                ${(workflowState == 'APPROVAL_ACCEPTED' || workflowState == 'APPROVAL_REJECTED') &amp;&amp; state == 'REVIEWED'}
            </conditionExpression>
        </sequenceFlow>

        <sequenceFlow id="flow12b" sourceRef="validateApprovalState" targetRef="handleApprovalError">
            <conditionExpression xsi:type="tFormalExpression">
                ${!(workflowState == 'APPROVAL_ACCEPTED' || workflowState == 'APPROVAL_REJECTED') || state != 'REVIEWED'}
            </conditionExpression>
        </sequenceFlow>

        <serviceTask id="handleApprovalError" name="Handle Approval Error"
                     flowable:class="com.task.flowable.taskapprovalflowable.delegate.InvalidStateErrorDelegate"/>

        <sequenceFlow id="flowApprovalError" sourceRef="handleApprovalError" targetRef="approveTask"/>

        <exclusiveGateway id="approvalDecision" name="Approval Decision"/>

        <sequenceFlow id="flow13" sourceRef="approvalDecision" targetRef="updateStateToApprovalAccepted">
            <conditionExpression xsi:type="tFormalExpression">${approved}</conditionExpression>
        </sequenceFlow>

        <sequenceFlow id="flow14" sourceRef="approvalDecision" targetRef="updateStateToApprovalRejected">
            <conditionExpression xsi:type="tFormalExpression">${!approved}</conditionExpression>
        </sequenceFlow>

        <serviceTask id="updateStateToApprovalAccepted" name="Update State to Approval Accepted"
                     flowable:delegateExpression="${stateUpdateDelegate}"/>

        <sequenceFlow id="flow15" sourceRef="updateStateToApprovalAccepted" targetRef="notifyApprovalAccepted"/>

        <serviceTask id="notifyApprovalAccepted" name="Notify Approval Accepted"
                     flowable:delegateExpression="${notificationDelegate}"/>

        <sequenceFlow id="flow16" sourceRef="notifyApprovalAccepted" targetRef="endEvent"/>

        <serviceTask id="updateStateToApprovalRejected" name="Update State to Approval Rejected"
                     flowable:delegateExpression="${stateUpdateDelegate}"/>

        <sequenceFlow id="flow17" sourceRef="updateStateToApprovalRejected" targetRef="notifyApprovalRejected"/>

        <serviceTask id="notifyApprovalRejected" name="Notify Approval Rejected"
                     flowable:delegateExpression="${notificationDelegate}"/>

        <sequenceFlow id="flow18" sourceRef="notifyApprovalRejected" targetRef="draftTask"/>

        <endEvent id="endEvent" name="End"/>
    </process>
</definitions>